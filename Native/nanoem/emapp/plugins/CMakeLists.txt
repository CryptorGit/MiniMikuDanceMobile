option(${PROJECT_NAME_PREFIX}_ENABLE_PLUGIN_TEST_HOST OFF)
option(${PROJECT_NAME_PREFIX}_ENABLE_PEPLUGIN_COMPAT OFF)

mark_as_advanced(${PROJECT_NAME_PREFIX}_ENABLE_PLUGIN_TEST_HOST ${PROJECT_NAME_PREFIX}_ENABLE_PEPLUGIN)
if(${PROJECT_NAME_PREFIX}_ENABLE_PLUGIN_TEST_HOST)
  set(_base_path ${PROJECT_SOURCE_DIR}/${PROJECT_NAME})
  add_library(${PROJECT_NAME}_plugin_test_dso SHARED ${PROJECT_BINARY_DIR}/version.c ${_base_path}/${PROJECT_NAME}.c ${_base_path}/ext/mutable.c)
  target_compile_definitions(${PROJECT_NAME}_plugin_test_dso PRIVATE NANOEM_BUILDING_DLL NANOEM_DLL_EXPORTS)
  add_executable(${PROJECT_NAME}_plugin_test_host ${CMAKE_CURRENT_SOURCE_DIR}/util/test_host.cc)
  target_include_directories(${PROJECT_NAME}_plugin_test_host  PRIVATE ${BX_INCLUDE_DIR} ${BX_COMPAT_INCLUDE_PATH})
  target_link_libraries(${PROJECT_NAME}_plugin_test_host ${PROJECT_NAME}_plugin_test_dso bx)
endif()

option(${PROJECT_NAME_PREFIX}_ENABLE_PLUGIN_INIT_GENERATOR OFF)
if(${PROJECT_NAME_PREFIX}_ENABLE_PLUGIN_INIT_GENERATOR)
  find_library(CLANG_LIBRARY NAMES clang libclang PATH_SUFFIXES lib PATHS /usr/local/opt/llvm "C:/Program Files/LLVM")
  find_path(CLANG_INCLUDE_PATH NAMES clang-c/Index.h PATH_SUFFIXES include PATHS /usr/local/opt/llvm "C:/Program Files/LLVM")
  mark_as_advanced(CLANG_LIBRARY CLANG_INCLUDE_PATH)
  if(CLANG_LIBRARY AND CLANG_INCLUDE_PATH)
    set(_plugin_name plugin_init_generator)
    add_executable(${_plugin_name} ${CMAKE_CURRENT_SOURCE_DIR}/util/generate_plugin_init.cc)
    target_compile_options(${_plugin_name} PRIVATE -std=c++11)
    target_include_directories(${_plugin_name} PRIVATE ${CLANG_INCLUDE_PATH})
    set_property(TARGET ${_plugin_name} PROPERTY FOLDER plugins)
    target_link_libraries(${_plugin_name} ${CLANG_LIBRARY})
    set(_plugin_name plugin_cs_generator)
    add_executable(${_plugin_name} ${CMAKE_CURRENT_SOURCE_DIR}/util/generate_cs.cc)
    target_compile_options(${_plugin_name} PRIVATE -std=c++11)
    target_include_directories(${_plugin_name} PRIVATE ${CLANG_INCLUDE_PATH})
    set_property(TARGET ${_plugin_name} PROPERTY FOLDER plugins)
    target_link_libraries(${_plugin_name} ${CLANG_LIBRARY})
    set(_plugin_name plugin_rust_generator)
    add_executable(${_plugin_name} ${CMAKE_CURRENT_SOURCE_DIR}/util/generate_rust.cc)
    target_compile_options(${_plugin_name} PRIVATE -std=c++11)
    target_include_directories(${_plugin_name} PRIVATE ${CLANG_INCLUDE_PATH})
    set_property(TARGET ${_plugin_name} PROPERTY FOLDER plugins)
    target_link_libraries(${_plugin_name} ${CLANG_LIBRARY})
  endif()
endif()

# aviutl
option(${PROJECT_NAME_PREFIX}_INSTALL_AVIUTL_PLUGIN OFF)
if(${PROJECT_NAME_PREFIX}_INSTALL_AVIUTL_PLUGIN)
  set(_plugin_name plugin_aviutl)
  add_library(${_plugin_name} SHARED ${CMAKE_CURRENT_SOURCE_DIR}/src/aviutl.cc
                                     $<$<BOOL:${WIN32}>:${PROJECT_SOURCE_DIR}/emapp/include/emapp/sdk/win32/Decoder.def>
                                     $<$<BOOL:${WIN32}>:${PROJECT_SOURCE_DIR}/emapp/include/emapp/sdk/win32/Encoder.def>)
  set_property(TARGET ${_plugin_name} PROPERTY FOLDER plugins)
  set_target_properties(${_plugin_name} PROPERTIES OUTPUT_NAME ${_plugin_name} PREFIX "" DEFINE_SYMBOL "")
  target_include_directories(${_plugin_name} PRIVATE ${PROJECT_SOURCE_DIR}/emapp/include ${PROJECT_SOURCE_DIR}/dependencies/protobuf-c)
  target_link_libraries(${_plugin_name} protobuf-c)
  nanoem_emapp_plugin_install(${_plugin_name})
endif()

if(APPLE)
  # QTKit plugin
  option(${PROJECT_NAME_PREFIX}_INSTALL_QTKIT_PLUGIN OFF)
  if(${PROJECT_NAME_PREFIX}_INSTALL_QTKIT_PLUGIN)
    set(_plugin_name plugin_qtkit)
    add_library(${_plugin_name} SHARED ${CMAKE_CURRENT_SOURCE_DIR}/obsolete/qtkit.mm)
    set_property(TARGET ${_plugin_name} PROPERTY FOLDER plugins)
    set_target_properties(${_plugin_name} PROPERTIES OUTPUT_NAME ${_plugin_name} PREFIX "" DEFINE_SYMBOL "")
    target_include_directories(${_plugin_name} PRIVATE ${PROJECT_SOURCE_DIR}/emapp/include)
    target_link_libraries(${_plugin_name} "-framework AppKit -framework QuartzCore -framework AudioToolbox -framework QTKit")
    nanoem_emapp_plugin_install(${_plugin_name})
  endif()
endif()

if(${PROJECT_NAME_PREFIX}_ENABLE_PEPLUGIN_COMPAT)
  add_subdirectory(PEPlugin)
endif()
add_subdirectory(avfoundation)
add_subdirectory(effect)
add_subdirectory(ffmpeg)
add_subdirectory(gif)
add_subdirectory(lsmash)
add_subdirectory(model)
add_subdirectory(motion)
add_subdirectory(pep_coreclr)
add_subdirectory(pep_fxr)
add_subdirectory(pep_mono)
add_subdirectory(ssb)
add_subdirectory(zip)
