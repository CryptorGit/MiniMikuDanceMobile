# nanoem.cmake

string(TOUPPER ${PROJECT_NAME} PROJECT_NAME_PREFIX)
option(${PROJECT_NAME_PREFIX}_ENABLE_ASAN "Enable clang/gcc ASAN (address sanitizer) option." OFF)
option(${PROJECT_NAME_PREFIX}_ENABLE_MSAN "Enable clang/gcc MSAN (memory sanitizer) option." OFF)
option(${PROJECT_NAME_PREFIX}_ENABLE_UBSAN "Enable clang/gcc UBSAN (undefined behavior sanitizer) option." OFF)
option(${PROJECT_NAME_PREFIX}_ENABLE_PEDANTIC_WARNINGS "Enable pedantic warning option." OFF)
option(${PROJECT_NAME_PREFIX}_ENABLE_COVERAGE "Enable code coverage option." OFF)

if(${PROJECT_NAME_PREFIX}_ENABLE_ASAN)
  find_package(ASan)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_ASAN}")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS_ASAN}")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS_ASAN}")
elseif(${PROJECT_NAME_PREFIX}_ENABLE_MSAN)
  find_package(MSan)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_MSAN}")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS_MSAN}")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS_MSAN}")
elseif(${PROJECT_NAME_PREFIX}_ENABLE_UBSAN)
  find_package(UBSan)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_UBSAN}")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS_UBSAN}")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS_UBSAN}")
endif()

if(${PROJECT_NAME_PREFIX}_ENABLE_PEDANTIC_WARNINGS)
  if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W4 /wd4100 /wd4115 /wd4127 /wd4201 /wd4206")
  else()
    #  -Winline
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 -pedantic -Wall -Wbad-function-cast -Wcast-align -Wcast-qual -Wno-missing-braces -Wextra -Wno-missing-field-initializers -Wformat=2 -Wswitch-default -Wswitch-enum -Wpointer-arith -Wstrict-overflow=5 -Wstrict-prototypes -Wundef -Wnested-externs -Wshadow -Wunreachable-code -Wfloat-equal -Wstrict-aliasing=2 -Wredundant-decls -Wold-style-definition -Werror -fstrict-aliasing")
    add_definitions(-D${PROJECT_NAME_PREFIX}_ENABLE_PEDANTIC_WARNINGS)
    if(CMAKE_COMPILER_IS_GNUCXX)
      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wlogical-op")
    endif()
  endif()
else()
  if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W3 /wd4100 /wd4115 /wd4127 /wd4201 /wd4206")
  else()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 -W -Wall -Wextra -Wformat")
  endif()
endif()

set(${PROJECT_NAME_PREFIX}_LIBRARY_TYPE STATIC)
if("${CMAKE_BUILD_TYPE}" STREQUAL "")
  set(CMAKE_BUILD_TYPE Release)
endif()
if(BUILD_SHARED_LIBS)
  set(${PROJECT_NAME_PREFIX}_LIBRARY_TYPE SHARED)
  add_definitions(-D${PROJECT_NAME_PREFIX}_BUILDING_DLL)
elseif(MSVC)
  foreach(flag_var
    CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
    CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
    if(${flag_var} MATCHES "/MD")
      string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
    endif()
  endforeach()
endif()
string(TOLOWER ${CMAKE_BUILD_TYPE} __${PROJECT_NAME}_BUILD_TYPE)

if(${PROJECT_NAME_PREFIX}_ENABLE_COVERAGE AND CMAKE_COMPILER_IS_GNUCXX AND ${__${PROJECT_NAME}_BUILD_TYPE} STREQUAL debug)
  include(CodeCoverage)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -O0 -fprofile-arcs -ftest-coverage")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lgcov -coverage")
  setup_target_for_coverage(${PROJECT_NAME}_coverage ${PROJECT_NAME}_test coverage)
endif()

function(link_icu target)
  find_path(ICU_INCLUDE_DIR unicode/ucnv.h)
  mark_as_advanced(ICU_INCLUDE_DIR)
  find_library(ICU_I18N_LIBRARY NAMES icui18n icuin)
  mark_as_advanced(ICU_I18N_LIBRARY)
  find_library(ICU_UC_LIBRARY NAMES icuuc)
  mark_as_advanced(ICU_UC_LIBRARY)
  find_library(ICU_DATA_LIBRARY NAMES icudata icudt)
  mark_as_advanced(ICU_DATA_LIBRARY)
  target_link_libraries(${target} ${ICU_I18N_LIBRARY} ${ICU_UC_LIBRARY} ${ICU_DATA_LIBRARY})
  include_directories(${ICU_INCLUDE_DIR})
endfunction()

function(find_glfw)
  find_path(GLFW_INCLUDE_DIR NAMES GLFW/glfw3.h GLFW/glfw.h PATH_SUFFIXES include PATHS $ENV{GLFW_LOCATION})
  mark_as_advanced(GLFW_INCLUDE_DIR)
  find_library(GLFW_LIBRARY NAMES glfw3 glfw PATH_SUFFIXES lib PATHS $ENV{GLFW_LOCATION})
  mark_as_advanced(GLFW_LIBRARY)
endfunction()

function(find_nanovg enable_embedded)
  set(NANOVG_INSTALL_PREFIX $ENV{NANOVG_LOCATION})
  find_path(NANOVG_INCLUDE_DIR nanovg.h PATH_SUFFIXES src PATHS ${NANOVG_INSTALL_PREFIX} NO_DEFAULT_PATH)
  mark_as_advanced(NANOVG_INCLUDE_DIR)
  if(${enable_embedded})
    find_path(NANOVG_SOURCE nanovg.c PATH_SUFFIXES src PATHS ${NANOVG_INSTALL_PREFIX} NO_DEFAULT_PATH)
  else()
    find_library(NANOVG_LIBRARY nanovg PATHS ${NANOVG_INSTALL_PREFIX}/build NO_DEFAULT_PATH)
    mark_as_advanced(NANOVG_LIBRARY)
  endif()
endfunction()

function(link_sdl2 target)
  find_path(SDL_INCLUDE_DIR SDL2/SDL.h PATH_SUFFIXES include PATHS $ENV{SDL_LOCATION})
  mark_as_advanced(SDL_INCLUDE_DIR)
  find_library(SDL_LIBRARY SDL2 PATH_SUFFIXES lib PATHS $ENV{SDL_LOCATION})
  mark_as_advanced(SDL_LIBRARY)
  find_library(SDLMAIN_LIBRARY SDL2main PATH_SUFFIXES lib PATHS $ENV{SDL_LOCATION})
  mark_as_advanced(SDLMAIN_LIBRARY)
  target_link_libraries(${target} ${SDL_LIBRARY} ${SDLMAIN_LIBRARY})
  include_directories(${SDL_INCLUDE_DIR})
endfunction()

function(find_glm)
  find_path(GLM_INCLUDE_DIR glm/glm.hpp PATHS $ENV{GLM_LOCATION} NO_DEFAULT_PATH)
  mark_as_advanced(GLM_INCLUDE_DIR)
endfunction()

function(find_bgfx)
  if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(BGFX_BIT_SIZE "64")
  elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
    set(BGFX_BIT_SIZE "32")
  endif()
  if(MSVC)
    set(BX_COMPAT_TYPE "msvc")
    if(MSVC12)
      set(BGFX_ARCH_TYPE "vs2013")
    elseif(MSVC11)
      set(BGFX_ARCH_TYPE "vs2012")
    elseif(MSVC10)
      set(BGFX_ARCH_TYPE "vs2010")
    elseif(MSVC9)
      set(BGFX_ARCH_TYPE "vs2008")
    else()
      message(FATAL_ERROR "NOT supported MSVC version!")
    endif()
  elseif(MINGW)
    set(BX_COMPAT_TYPE "mingw")
  elseif(APPLE)
    set(BX_COMPAT_TYPE "osx")
    set(BGFX_ARCH_TYPE "osx${BGFX_BIT_SIZE}_clang")
  elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    set(BGFX_ARCH_TYPE "linux${BGFX_BIT_SIZE}_gcc")
  elseif(${CMAKE_SYSTEM_NAME} STREQUAL "FreeBSD")
    set(BX_COMPAT_TYPE "freebsd${BGFX_BIT_SIZE}_gcc")
  endif()
  find_path(BX_INCLUDE_DIR bx/bx.h PATH_SUFFIXES include PATHS $ENV{BX_LOCATION} NO_DEFAULT_PATH)
  mark_as_advanced(BX_INCLUDE_DIR)
  if(BX_COMPAT_TYPE)
    find_path(BX_COMPAT_INCLUDE_PATH NAMES alloca.h malloc.h memory.h PATH_SUFFIXES include/compat/${BX_COMPAT_TYPE} PATHS $ENV{BX_LOCATION} NO_DEFAULT_PATH)
    mark_as_advanced(BX_COMPAT_INCLUDE_PATH)
  endif()
  find_path(BGFX_INCLUDE_DIR bgfx.h PATH_SUFFIXES include PATHS $ENV{BGFX_LOCATION} NO_DEFAULT_PATH)
  mark_as_advanced(BGFX_INCLUDE_DIR)
  find_path(BGFX_EXAMPLE_COMMON_DIR nanovg/nanovg.h PATH_SUFFIXES examples/common PATHS $ENV{BGFX_LOCATION} NO_DEFAULT_PATH)
  mark_as_advanced(BGFX_EXAMPLE_COMMON_DIR)
  find_path(BGFX_THIRDPARTY_DIR freetype/freetype.h  PATH_SUFFIXES 3rdparty PATHS $ENV{BGFX_LOCATION} NO_DEFAULT_PATH)
  mark_as_advanced(BGFX_THIRDPARTY_DIR)
  find_library(BGFX_LIBRARY bgfx-shared-lib${CMAKE_BUILD_TYPE} PATH_SUFFIXES .build/win${BGFX_BIT_SIZE}_${BGFX_ARCH_TYPE}/bin .build/${BGFX_ARCH_TYPE}/bin PATHS $ENV{BGFX_LOCATION} NO_DEFAULT_PATH)
  mark_as_advanced(BGFX_LIBRARY)
endfunction()

function(link_bgfx target)
  find_package(OpenGL)
  include_directories(${OPENGL_INCLUDE_DIR})
  target_link_libraries(${target} ${BGFX_LIBRARY} ${OPENGL_gl_LIBRARY})
  if(NOT BUILD_SHARED_LIBS AND MSVC)
    target_link_libraries(${target} winmm imm32 version)
    if(${__${PROJECT_NAME}_BUILD_TYPE} STREQUAL "debug")
      if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(DXERR_LIBRARY_ARCH_TYPE "x64")
      elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
        set(DXERR_LIBRARY_ARCH_TYPE "x86")
      endif()
      find_library(DXERR_LIBRARY_PATH dxerr PATH_SUFFIXES lib/${DXERR_LIBRARY_ARCH_TYPE} PATHS $ENV{DXSDK_DIR})
      mark_as_advanced(DXERR_LIBRARY_PATH)
      target_link_libraries(${target} ${DXERR_LIBRARY_PATH})
    endif()
  endif()
  if(APPLE)
    find_library(COCOA_FRAMEWORK Cocoa)
    mark_as_advanced(COCOA_FRAMEWORK)
    target_link_libraries(${target} ${COCOA_FRAMEWORK})
  endif()
endfunction()
